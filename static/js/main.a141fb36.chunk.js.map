{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","task","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a141fb36.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus}) => {\r\n    //Here I can write javascript code and function \r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value);\r\n    };\r\n    //this is for after you hit the plus button the hold page won't refresh \r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos,\r\n            {text: inputText, completed: false, id: Math.random() *1000 }\r\n        ]);\r\n        setInputText(\"\");\r\n    };\r\n    const statusHandler = (task) => {\r\n        setStatus(task.target.value);\r\n    };\r\n    return (\r\n        <form>\r\n            <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">ALL</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n    \r\nexport default Form;","import React from \"react\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {\r\n    //Events\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter(task => task.id !== todo.id));\r\n    };\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(item => {\r\n            if(item.id === todo.id){\r\n                return{\r\n                    ...item,\r\n                    completed: !item.completed,\r\n                };\r\n            }\r\n            return item;\r\n          })\r\n        );\r\n    };\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n                {text}\r\n            </li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n               <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n               <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Todo; ","import React from \"react\";\r\n//Import Components\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\r\n    return(\r\n      <div className=\"todo-container\">\r\n          <ul className=\"todo-list\">\r\n              {todos.map((todo) => (\r\n                  <Todo \r\n                    setTodos={setTodos}\r\n                    todos={todos} \r\n                    key={todo.id} \r\n                    todo={todo}\r\n                    text={todo.text} \r\n                 />\r\n               ))}\r\n          </ul>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, { useState,useEffect } from \"react\";\nimport './App.css';\n//Importing Components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  //State stuff\n  const [inputText, setInputText] = useState(\"\");\n  // Making the List for the todo list\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] =useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //run once when the app start\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n  //USE EFFECT\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n  //Functions\n  const filterHandler = () => {\n    switch(status){\n      case \"completed\":\n        setFilteredTodos(todos.filter((todo) => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break  \n    }\n  };\n  //Save to Local\n  const saveLocalTodos = () => {\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n  const getLocalTodos = () => {\n    if(localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n     let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n     setTodos(todoLocal);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n       <header>\n        <h1>Todo List</h1>\n       </header>\n       <Form\n         inputText={inputText}\n         todos={todos}\n         setTodos={setTodos}\n         setInputText={setInputText}\n         setStatus={setStatus}\n      />\n      <TodoList\n        setFilteredTodos={filteredTodos}\n        setTodos={setTodos} \n        todos={todos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}